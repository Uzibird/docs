(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{354:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"python类的特殊方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python类的特殊方法"}},[t._v("#")]),t._v(" Python类的特殊方法")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("blockquote",[a("p",[t._v("python类中的一些特殊方法,如repr,del,,getattr,call等。 类中各方法的实现原理。对方法的修改以及调用。")])]),t._v(" "),a("h2",{attrs:{id:"常见的特殊方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的特殊方法"}},[t._v("#")]),t._v(" 常见的特殊方法")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("_"),a("em",[t._v("_"),a("em",[t._v("repr")])]),t._v("__")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cls是一个类，是内存中的一个对象，而print只能输出字符串，所以有cls.__repr__")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__repr__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("blockquote",[a("ul",[a("li",[t._v("__del__  用于销毁Python对象，在任何Python对象将要被系统回收之时，系统都会自动调用该对象的 __del__ 方法")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#只有当系统中无变量引用时，系统才会调用del方法销毁")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" price\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义析构函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__del__")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'del删除对象'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个Item对象，将之赋给im变量")]),t._v("\n    im "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'鼠标'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29.8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" im   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ①")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印im所引用的Item对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" im\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--------------'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#输出如下")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为 x 依然在调用 所以兵没有直接销毁，等执行完成后才进行销毁。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" 删除对象\n")])])]),a("blockquote",[a("ul",[a("li",[t._v("__dir__ 用于列出该对象内部的所有属性（包括方法）名，返回一个序列。")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("__dict__属性 查看对象内部存储的所有属性名和属性值组成的字典")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("可直接调用该方法查看，也可用字典语法来访问或修改指定属性的值。\n")])])]),a("blockquote",[a("ul",[a("li",[t._v("__getattr__ ,__setattr__      "),a("strong",[t._v("P178")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("当程序操作（包括访问 设置 删除）对象的属性时，Python调用此方法\n")])])]),a("ul",[a("li",[t._v("__getattributte__(self,name) 当程序访问对象的name属性时候调用")]),t._v(" "),a("li",[t._v("__getattr__(self,name) 当程序访问对象的name属性且该属性不存在时被调用")]),t._v(" "),a("li",[t._v("__setattr__(self,name,value) 当程序对对象的name赋值时被调用")]),t._v(" "),a("li",[t._v("__delattr__(self,name) 当程序删除对象的name属性时调用")])]),t._v(" "),a("p",[t._v("Python提供的各种方法与类只是语法上的实现，在深入了解后，这些东西都是可改变的，灵活性极高。")]),t._v(" "),a("h2",{attrs:{id:"与反射相关的属性和方法-p180"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与反射相关的属性和方法-p180"}},[t._v("#")]),t._v(" 与反射相关的属性和方法 "),a("strong",[t._v("P180")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"动态操作属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态操作属性"}},[t._v("#")]),t._v(" 动态操作属性")])]),t._v(" "),a("ul",[a("li",[t._v("hasattr(obj,name) 检查obj对象是否包含名为 name 的属性或方法")]),t._v(" "),a("li",[t._v("getattr(obj,name[, default]) 获取obj对象中名为 name 的属性的属性值")]),t._v(" "),a("li",[t._v("setattr(obj,name,value,/) 将obj对象的name属性设为value")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"call-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-属性"}},[t._v("#")]),t._v(" __call__ 属性")])]),t._v(" "),a("p",[t._v("用hasattr函数判断属性或方法是否存在，但要区分是属性还是方法，则需要进一步判断是否可以调用。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("__可通过判断是否包含__cal__属性来确定是否可调用__\n")])])]),a("h2",{attrs:{id:"与序列相关的特殊方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与序列相关的特殊方法"}},[t._v("#")]),t._v(" 与序列相关的特殊方法")]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"序列相关方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列相关方法"}},[t._v("#")]),t._v(" 序列相关方法")])]),t._v(" "),a("ul",[a("li",[t._v("__len__(self) 该方法的返回值决定序列中元素的个数")]),t._v(" "),a("li",[t._v("__getitem__(self,key) 该方法获取指定索引对应的元素")]),t._v(" "),a("li",[t._v("__contains__(self,key) 该方法判断序列是否包含指定元素")]),t._v(" "),a("li",[t._v("__setitem__(self,key,value) 该方法设置指定索引对应的元素 key应为整数或slice对象")]),t._v(" "),a("li",[t._v("__delitem__(self,key) 该方法删除指定索引对应的元素")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")])]),t._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"iter-self-该方法返回一个迭代器（iterator）-迭代器必须包含一个-next-方法-该方法返回迭代器的下一个元素。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iter-self-该方法返回一个迭代器（iterator）-迭代器必须包含一个-next-方法-该方法返回迭代器的下一个元素。"}},[t._v("#")]),t._v(" __iter__(self) 该方法返回一个迭代器（iterator）,迭代器必须包含一个__next__()方法 该方法返回迭代器的下一个元素。")])]),t._v(" "),a("li",[a("h4",{attrs:{id:"reversed-self-该方法为-内建的-reversed-反转函数提供支持。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reversed-self-该方法为-内建的-reversed-反转函数提供支持。"}},[t._v("#")]),t._v(" __reversed__(self) 该方法为 内建的 "),a("strong",[t._v("reversed()")]),t._v(" 反转函数提供支持。")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义一个代表斐波那契数列的迭代器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fibs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sec "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义迭代器所需的__next__方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__next__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果__len__属性为0，结束迭代")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" StopIteration\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 完成数列计算：")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sec "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sec\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数列长度减1")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义__iter__方法，该方法返回迭代器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iter__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建Fibs对象")]),t._v("\nfibs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Fibs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取迭代器的下一个元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fibs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用for循环遍历迭代器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" el "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" fibs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将列表转换为迭代器")]),t._v("\nmy_iter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("iter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fkit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 依次获取迭代器的下一个元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__next__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_iter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__next__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fkit")]),t._v("\n")])])]),a("p",[a("strong",[t._v("该类实现了iter方法，该方法返回self，因此它要求该类必须提供__next__()方法 该方法回返回数列的下一个值。程序使用__len属性控制数列的剩余长度，__len为0时停止遍历")])]),t._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"对列表-字典-元组的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对列表-字典-元组的扩展"}},[t._v("#")]),t._v(" 对列表 字典 元组的扩展")])])]),t._v(" "),a("p",[a("strong",[t._v("列表 元组等本身已经实现了这些序列方法、迭代器方法，因此他们既是序列也是迭代器")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("如果需要实现一个特殊的的列表、元组或字典类，有两个选择\n")])])]),a("ul",[a("li",[t._v("自己实现序列 迭代器等各种方法 自己来实现这个特殊的类")]),t._v(" "),a("li",[t._v("扩展系统已有的列表 元组 字典")])]),t._v(" "),a("p",[t._v("使用第二种方法比较简单，只要继承系统已有的列表 元组或字典类，然后新增或重写方法即可。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义ValueDict类，继承dict类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ValueDict")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调用父类的构造函数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新增getkeys方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getkeys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\nmy_dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ValueDict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("语文 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 数学 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("89")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 英语 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取92对应的所有key")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getkeys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['语文', '英语']")]),t._v("\nmy_dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'编程'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getkeys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("92")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['语文', '英语', '编程']")]),t._v("\n")])])]),a("h3",{attrs:{id:"生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"创建生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建生成器"}},[t._v("#")]),t._v(" 创建生成器")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("定义一个包含yield语句的函数")]),t._v(" "),a("li",[t._v("调用第一步创建的函数得到生成器")])])])]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"生成器的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成器的方法"}},[t._v("#")]),t._v(" 生成器的方法")])]),t._v(" "),a("p",[a("strong",[t._v("生成器运行起来后 还可以为生成器提供值，通过这种方式让生成器与“外部程序”动态地交换数据")])]),t._v(" "),a("p",[t._v("使用send()方法交换数据")]),t._v(" "),a("p",[t._v("在生成器函数内部 程序可通过yield表达式来获取send()方法所发送的值 ，此时程序应该使用一个变量来接收yield语句的值 无参数时 yield返回 None")]),t._v(" "),a("p",[t._v("1."),a("strong",[t._v("外部程序通过send()方法发送数据")]),t._v("\n2."),a("strong",[t._v("生成器函数使用yield语句接收数据")])])])}),[],!1,null,null,null);s.default=e.exports}}]);